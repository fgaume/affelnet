/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { ExpirationPlugin } from "workbox-expiration";
import { precacheAndRoute, createHandlerBoundToURL } from "workbox-precaching";
import { registerRoute } from "workbox-routing";
import {
  CacheFirst,
  NetworkFirst,
  StaleWhileRevalidate,
} from "workbox-strategies";

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith("/_")) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + "/index.html")
);

// caching route for image requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) =>
    url.origin === self.location.origin &&
    (url.pathname.endsWith(".png") || url.pathname.endsWith(".jpg")),
  new CacheFirst({
    cacheName: "publicImages",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60,
      }), // 1 day cache
    ],
  })
);

// APIs education nationale arcgis
registerRoute(
  ({ request }) => request.url.includes("arcgis"),
  new StaleWhileRevalidate({
    cacheName: "arcgis",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used are removed.
      new ExpirationPlugin({
        maxEntries: 300,
        maxAgeSeconds: 60 * 60 * 24,
      }),
    ],
  })
);

// firebase webConfig init call
registerRoute(
  ({ request }) => request.url.endsWith("webConfig"),
  new CacheFirst({
    cacheName: "firebaseWebConfig",
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used are removed.
      new ExpirationPlugin({
        maxEntries: 1,
        maxAgeSeconds: 24 * 60 * 60, // 1 day
      }),
    ],
  })
);

registerRoute(
  ({ request }) => request.url.endsWith("app.json"),
  new NetworkFirst({
    cacheName: "app-infos",
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 24 * 60 * 60, // 1 day
      }),
    ],
  })
);

registerRoute(
  ({ request }) => request.url.endsWith("statistiques.json"),
  new StaleWhileRevalidate({
    cacheName: "statistiques",
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 1 * 24 * 60 * 60,
      }),
    ],
  })
);

registerRoute(
  ({ request }) => request.url.endsWith("colleges.json"),
  new StaleWhileRevalidate({
    cacheName: "colleges",
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 1 * 24 * 60 * 60,
      }),
    ],
  })
);

registerRoute(
  ({ request }) => request.url.endsWith("lycees.json"),
  new StaleWhileRevalidate({
    cacheName: "lycees",
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 7 * 24 * 60 * 60,
      }),
    ],
  })
);

registerRoute(
  ({ request }) => request.url.endsWith("seuils_recents.json"),
  new NetworkFirst({
    cacheName: "seuils_recents",
    networkTimeoutSeconds: 5, // Délai d'attente de 5 secondes
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 30,
      }),
    ],
  })
);

registerRoute(
  ({ request }) => request.url.endsWith("stats_recentes.json"),
  new NetworkFirst({
    cacheName: "stats_recentes",
    networkTimeoutSeconds: 5, // Délai d'attente de 5 secondes
    plugins: [
      new ExpirationPlugin({
        maxAgeSeconds: 30,
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener("message", (event) => {
  if (event.data && event.data.type === "SKIP_WAITING") {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
